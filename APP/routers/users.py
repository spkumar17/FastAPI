
# Users.......................................
from fastapi import FastAPI, status, HTTPException ,Depends , APIRouter # type: ignore
from database import get_db
import models
from sqlalchemy.orm import Session
from schema import Retrieve_userdata ,Users_data 
from typing import List
import utils

router = APIRouter()




@router.post("/Users/create", status_code=status.HTTP_201_CREATED,response_model=Retrieve_userdata)
def create_new_post(user : Users_data , db: Session = Depends(get_db)):
    
    #Hash the password
    
    hashed_password =  utils.hash(user.password)
    user.password = hashed_password

    new_User = models.Users(**user.dict()) #When you want to create a new record (like a new post), you're not querying existing dataâ€”you're inserting a new entry. Hence, you don't need to use db.query() for creation.
    db.add(new_User)# Adding the new object to the session
    db.commit() # Committing to the database (actually saving the new post)
    db.refresh(new_User) # Refreshing the object to get the latest info (like autogenerated fields)
    
    return new_User

@router.get("/Users",response_model=List[Retrieve_userdata])
def users( db: Session = Depends(get_db)):
    
    all_users = db.query(models.Users).all()  #This line queries the post table (from your models module).   .all() fetches all rows as a list.
    #SELECT users.id, users.user_name, users.email_id, users.password, users.created_at FROM users;
    if len(all_users) >= 0:
        return all_users
    else:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail="No users found") 
    
    

@router.get("/Users/{user}",response_model=List[Retrieve_userdata])
def users(user: str , db: Session = Depends(get_db)):
    
    all_users = db.query(models.Users).filter(models.Users.user_name == user).all()
    if len(all_users) > 0:
        return all_users
    else:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail=f"No users found with name {user}") 



@router.get("/Users_by_id/{id}",response_model=Retrieve_userdata)
def users(id: int , db: Session = Depends(get_db)):
    
    users_id = db.query(models.Users).filter(models.Users.id == id).first()
    if users_id is not None:
        return users_id
    else:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail=f"No users found with name {id}") 
                
        
  

